name: Non-pertinent validation check

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  security-events: write

jobs:
  secret-scan:
    name: Secret scan (Gitleaks → SARIF)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # If you've already committed .gitleaks.toml at repo root, this step does nothing.
      - name: Ensure .gitleaks.toml (allowlist doc placeholders only)
        shell: bash
        run: |
          if [ ! -f .gitleaks.toml ]; then
            cat > .gitleaks.toml <<'EOF'
            title = "AV-SAFE — allowlist for doc placeholders (API.md only)"

            [allowlist]
            description = "Ignore placeholder Authorization/Idempotency-Key lines in documentation; scan everything else."
            # Only applies to docs/api.md so we don't mask real leaks elsewhere.
            paths = [ '''(?i)^docs/api\.md$''' ]
            regexes = [
              '''^Authorization:\s*Bearer\s*(<token>|&lt;token&gt;)(\s*#.*)?$''',
              '''^Idempotency-Key:\s*(<uuid-v4>)(\s*#.*)?$'''
            ]
            EOF
          fi

      - name: Scan repository (Gitleaks)
        uses: gitleaks/gitleaks-action@v2
        with:
          # Write SARIF to the repo root so the next step can find it.
          args: >
            --no-banner
            --config=.gitleaks.toml
            --source .
            --report-format sarif
            --report-path ./gitleaks.sarif
            --redact

      # Belt & suspenders: if some versions of gitleaks skip writing a report when 0 findings,
      # create a minimal empty SARIF so the upload step has a file to consume.
      - name: Ensure SARIF exists (create empty if missing)
        if: always()
        shell: bash
        run: |
          if [ ! -f ./gitleaks.sarif ]; then
            printf '{"version":"2.1.0","runs":[]}\n' > ./gitleaks.sarif
          fi
          ls -la ./gitleaks.sarif

      - name: Upload SARIF to GitHub Security
        if: always() && hashFiles('gitleaks.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  crypto-check:
    name: Enforce real crypto (no demo fallback)
    runs-on: ubuntu-latest
    env:
      AVSAFE_STRICT_CRYPTO: "1"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install project & test deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pynacl pytest

      - name: Run crypto test
        run: pytest -q tests/test_signing_crypto.py
