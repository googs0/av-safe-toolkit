name: AV-SAFE cloud e2e (LOCAL_MODE)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  cloud-e2e-local:
    runs-on: ubuntu-latest
    env:
      # Zero-cost and self-contained
      LOCAL_MODE: "1"
      AUTH_MODE: dev
      DEV_TOKEN: devtoken
      # make your packages importable from the repo root
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # ensure runtime libs for the API and validation are present
          pip install fastapi mangum pydantic "python-jose[cryptography]" requests uvicorn jsonschema

      - name: Import probe (helps catch path issues early)
        run: |
          python - <<'PY'
          import importlib
          mods = [
              "cloud.api_app", "cloud.common", "cloud.verify_lambda", "cloud.rules_lambda", "cloud.local_runner",
              "avsafe_descriptors.cli.sim", "avsafe_descriptors.cli.rules_run",
          ]
          for m in mods:
              importlib.import_module(m); print("[OK]", m)
          PY

      - name: Start local API (FastAPI)
        run: |
          nohup python -m uvicorn cloud.api_app:app --host 127.0.0.1 --port 8000 >/tmp/api.log 2>&1 &
          # health wait-loop
          for i in {1..30}; do
            sleep 0.5
            if curl -fsS http://127.0.0.1:8000/health >/dev/null; then
              echo "API up"; break
            fi
          done
          curl -fsS http://127.0.0.1:8000/health || (echo "API failed to start"; tail -n +1 /tmp/api.log; exit 1)

      - name: Generate minutes & upload via client
        run: |
          python -m avsafe_descriptors.cli.sim --minutes 2 --outfile minutes.jsonl
          gzip -c minutes.jsonl > minutes.jsonl.gz
          python tools/client_uploader.py \
            --base http://127.0.0.1:8000 \
            --token "$DEV_TOKEN" \
            --label "CI Case" \
            --device DEV-CI \
            --file minutes.jsonl.gz

      - name: Process locally (verify → rules → report)
        run: |
          python -m cloud.local_runner --once

      - name: Show local_data tree (for debugging)
        run: |
          echo "===== local_data ====="
          find local_data -maxdepth 6 -print || true

      - name: Assert report exists & is non-empty
        run: |
          REPORT=$(find local_data -type f -name 'report.html' | head -n1 || true)
          echo "Report path: $REPORT"
          test -n "$REPORT"
          test -s "$REPORT"
          head -n 40 "$REPORT" || true

      - name: Validate produced minutes against schema (optional)
        run: |
          set -e
          MIN=$(find local_data -type f -path '*/avsafe-verified/verified/*/*/minutes.jsonl' | head -n1 || true)
          echo "Minutes path: $MIN"
      
          # Try both possible schema locations
          SCHEMA=""
          for p in \
            schemas/avsafe-minute-summary.schema.json \
            avsafe_descriptors/hf_avc/schemas/avsafe-minute-summary.schema.json
          do
            if [ -f "$p" ]; then SCHEMA="$p"; break; fi
          done
      
          # Only run if both the CLI is importable and the schema exists
          if python -c "import avsafe_descriptors.cli.validate_minutes" 2>/dev/null && [ -n "$SCHEMA" ]; then
            python -m avsafe_descriptors.cli.validate_minutes \
              --in "$MIN" \
              --schema "$SCHEMA"
          else
            echo "[WARN] validator or schema missing; skipping schema check."
          fi


      - name: Always show API logs on exit
        if: always()
        run: |
          echo "==== /tmp/api.log ===="
          tail -n +1 /tmp/api.log || true

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: cloud-e2e-report
          path: |
            local_data/**/report.html
            local_data/**/verification.json
            local_data/**/results.json
