[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "avsafe-descriptors"
version = "0.9.2"
description = "Privacy-preserving audiovisual metrology (LAeq, 1/3-octaves, IEEE-1789 flicker) with hash-chained reports and an HF-AVC historico-forensic corpus."
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [{ name = "AV-SAFE Contributors" }]

# Runtime deps (kept in sync with requirements.txt)
dependencies = [
  "fastapi>=0.111",
  "uvicorn[standard]>=0.30",
  "sqlalchemy>=2.0",
  "pydantic>=2.7",
  "pydantic-settings>=2.0",
  "PyYAML>=6.0.1",
  "Jinja2>=3.1",
  "python-multipart>=0.0.9",   # file uploads (FastAPI)
  "jsonschema>=4.22",
  "pynacl>=1.5",               # Ed25519 signatures
  "cryptography>=42",          # crypto primitives
  "python-dateutil>=2.9",
]

[project.optional-dependencies]
dev = [
  "pytest>=8.2,<9",
  "pytest-cov>=5,<6",
  "hypothesis>=6.103,<7",
  "freezegun>=1.5.1,<2",
  "httpx>=0.27,<0.29",
  "black>=24.8,<25",
  "ruff>=0.5,<0.6",
  "mypy>=1.10,<1.11",
  "pre-commit>=3.7,<4",
  "detect-secrets>=1.5,<2",
  "ipython>=8.25,<9",
]

[project.scripts]
avsafe-sim       = "avsafe_descriptors.cli.sim:main"
avsafe-rules-run = "avsafe_descriptors.cli.rules_run:main"
avsafe-report    = "avsafe_descriptors.cli.report:main"
hf-avc-ingest    = "avsafe_descriptors.hf_avc.ingest_cli:main"
hf-avc-query     = "avsafe_descriptors.hf_avc.query_cli:main"   
avsafe-video-to-light = "avsafe_descriptors.cli.video_to_light:main"

[project.urls]
Homepage = "https://github.com/googs0/av-safe-toolkit"
Repository = "https://github.com/googs0/av-safe-toolkit"
Issues = "https://github.com/googs0/av-safe-toolkit/issues"
Documentation = "https://github.com/googs0/av-safe-toolkit/tree/main/docs"

[tool.setuptools]
include-package-data = true

# Ship schema/context/profile files inside the wheel so CLI tools work out-of-the-box
[tool.setuptools.package-data]
avsafe_descriptors = [
  "hf_avc/schemas/*.json",
  "hf_avc/schemas/*.jsonld",
  "hf_avc/cases/*.json",
  "rules/profiles/*.yaml",
]

[tool.setuptools.packages.find]
where = ["."]

# -------------------------
# Dev tooling configuration
# -------------------------

[tool.black]
line-length = 100
target-version = ["py310", "py311"]

[tool.ruff]
line-length = 100
target-version = "py311"
lint.select = [
  "E","F","W",   # pycodestyle / pyflakes
  "I",          # isort
  "B",          # flake8-bugbear
  "UP",         # pyupgrade
]
lint.ignore = ["E501"]         # handled by Black
exclude = ["docs/"]

[tool.mypy]
python_version = "3.11"
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
strict_optional = true
no_implicit_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
exclude = ["docs/"]
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
  "fastapi.*",
  "starlette.*",
  "sqlalchemy.*",
  "pydantic_settings.*",
  "nacl.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-q"
filterwarnings = [
  "ignore::DeprecationWarning:jose.*",
  "ignore::DeprecationWarning:pydantic.*",
]
